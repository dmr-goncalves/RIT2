package Project1;

/**
 * Redes Integradas de TelecomunicaÃ§Ãµes II
 * MIEEC 2013/2014
 *
 * httpThread.java
 *
 * Main class with graphical interface and main thread that accepts incoming connections
 * Calls httpThread to handle individual HTTP requests
 * INCOMPLETE VERSION
 *
 */

import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.util.Properties;


public class guiHttpd extends javax.swing.JFrame implements Log {
    public final static  String server_name= "HTTP RIT2 2015/2016 by 40237/40581/41038";
    public final static String HOMEFILENAME= "index.htm";
    final static int DefaultMaxThreads= 10; // Maximum number of threads
    final static int MaxAcceptLog= 10;  // Accepts up to 10 pending TCP connections
    SHttpd main_thread= null;
    public ServerSocket server;
    public int max_threads= DefaultMaxThreads;
    public int n_threads= 0;
    final Integer lock= new Integer(0);
     public Properties last_update;
    
    /** Creates new form guiHttpd */
    public guiHttpd () {
        initComponents ();
        setTitle(server_name);
         last_update = new Properties();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        jTextPorto = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextIP = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextRaizHtml = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextKeepAlive = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextThreads = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextMaxThreads = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setTitle("HTTP RIT2 2015/2016 by ?????/?????/?????");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(450, 35));
        jPanel1.setMinimumSize(new java.awt.Dimension(450, 35));
        jPanel1.setName("Estado"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(450, 35));

        jToggleButton1.setText("Active");
        jToggleButton1.setMaximumSize(new java.awt.Dimension(85, 29));
        jToggleButton1.setPreferredSize(new java.awt.Dimension(85, 29));
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButton1);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Port");
        jLabel4.setMaximumSize(new java.awt.Dimension(35, 17));
        jLabel4.setPreferredSize(new java.awt.Dimension(35, 17));
        jPanel1.add(jLabel4);

        jTextPorto.setText("20000");
        jPanel1.add(jTextPorto);

        jLabel5.setText("IP");
        jPanel1.add(jLabel5);

        jTextIP.setEditable(false);
        jTextIP.setPreferredSize(new java.awt.Dimension(200, 20));
        jPanel1.add(jTextIP);

        getContentPane().add(jPanel1);

        jPanel3.setMaximumSize(new java.awt.Dimension(390, 37));
        jPanel3.setMinimumSize(new java.awt.Dimension(60, 33));
        jPanel3.setPreferredSize(new java.awt.Dimension(390, 33));

        jLabel8.setText("Html:");
        jPanel3.add(jLabel8);

        jTextRaizHtml.setText("D:\\Documentos\\FCT\\4o Ano\\2o Semestre\\RIT 2\\Trabalhos Praticos\\1º\\rit2_t1_students_by_40237_40581_41038\\html");
        jTextRaizHtml.setPreferredSize(new java.awt.Dimension(340, 20));
        jTextRaizHtml.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextRaizHtmlFocusLost(evt);
            }
        });
        jTextRaizHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextRaizHtmlActionPerformed(evt);
            }
        });
        jPanel3.add(jTextRaizHtml);

        getContentPane().add(jPanel3);

        jPanel2.setToolTipText("configuração");
        jPanel2.setMaximumSize(new java.awt.Dimension(420, 35));
        jPanel2.setMinimumSize(new java.awt.Dimension(420, 35));
        jPanel2.setName("configuracao"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(420, 35));

        jButtonClear.setText("Clear");
        jButtonClear.setMaximumSize(new java.awt.Dimension(75, 29));
        jButtonClear.setPreferredSize(new java.awt.Dimension(75, 29));
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonClear);

        jLabel1.setText("  Keep-Alive: ");
        jPanel2.add(jLabel1);

        jTextKeepAlive.setText("0");
        jTextKeepAlive.setPreferredSize(new java.awt.Dimension(30, 19));
        jPanel2.add(jTextKeepAlive);

        jLabel3.setText(" Threads: ");
        jPanel2.add(jLabel3);

        jTextThreads.setEditable(false);
        jTextThreads.setText("0");
        jTextThreads.setPreferredSize(new java.awt.Dimension(30, 19));
        jPanel2.add(jTextThreads);

        jLabel6.setText("  Max: ");
        jPanel2.add(jLabel6);

        jTextMaxThreads.setText("10");
        jTextMaxThreads.setPreferredSize(new java.awt.Dimension(30, 19));
        jPanel2.add(jTextMaxThreads);

        getContentPane().add(jPanel2);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(360, 180));

        jTextArea1.setLineWrap(true);
        jTextArea1.setPreferredSize(new java.awt.Dimension(200, 2000));
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);

        getAccessibleContext().setAccessibleName("HTTP GUI - RIT2 2011/2012 by ?????/?????/?????");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /** Validates the html root directory name (only for Linux) */
    public void validate_name (javax.swing.JTextField f) {
        String str= f.getText ();
        if (str.length () == 0)
            return;
        
        char separator;
        if (str.indexOf ("\\") != -1)
            // Running in Windows
            separator= '\\';
        else
            // Running in Linux
            separator= '/';
        
        if (str.charAt (str.length ()-1) != separator) {
            str= str + separator;
        } else {
            while ((str.length ()>1) && (str.charAt (str.length ()-2) == separator)) {
                str= str.substring (0, str.length ()-1);
            }
        }
        f.setText (str);
    }
    
    /** Automatically validates the html directory name */
    private void jTextRaizHtmlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextRaizHtmlFocusLost
        validate_name (jTextRaizHtml);
    }//GEN-LAST:event_jTextRaizHtmlFocusLost
        
    /** Cleans the text area */
    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText ("");
    }//GEN-LAST:event_jButtonClearActionPerformed
    
    /** Cleans the text area */
    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        if (evt.getKeyChar () == ' ')
            jTextArea1.setText ("");
    }//GEN-LAST:event_jTextArea1KeyPressed
    
    /** Starts and stops the web server */
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected ()) {
            // Parse UI parameters            
            int porto;
            try {
                porto= Integer.parseInt (jTextPorto.getText ());
            } catch (NumberFormatException e) {
                Log ("Invalid port number\n");
                jToggleButton1.setSelected (false);
                return;
            }
            // Starts web server
            try {
                server= new ServerSocket (porto, MaxAcceptLog);
            } catch (java.io.IOException e) {
                Log ("Server start failure: " + e + "\n");
                jToggleButton1.setSelected (false);
                return;
            }
            // Gets local IP
            try {
                jTextIP.setText (InetAddress.getLocalHost ().getHostAddress ());
            } catch (UnknownHostException e) {
                Log ("Failed to get local IP: "+e+"\n");
            }
            // starts main thread
            main_thread= new SHttpd ( this, server);
            n_threads= 0;
            jTextThreads.setText ("0");
            max_threads= getMaxThreads ();
            main_thread.start ();
            
            setEditable_jText (false);
        } else {
            // Stops web server
            try {
                if (main_thread != null) {
                    main_thread.stop_thread ();
                    main_thread= null;
                }
                if (server != null) {
                    server.close ();
                    server= null;
                }
            } catch (IOException e) {
                Log ("Exception closing server socket: "+e+"\n");
            }
            jTextIP.setText ("");
            setEditable_jText (true);
            n_threads= 0;
            jTextThreads.setText ("0");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    
    
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm

    private void jTextRaizHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextRaizHtmlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextRaizHtmlActionPerformed
    
    /** Controls editability of jTexts */
    public void setEditable_jText (boolean editable) {
        jTextPorto.setEditable (editable);
        jTextRaizHtml.setEditable (editable);
        jTextMaxThreads.setEditable (editable);
    }
    
    /** Logs a message on the command line and on the text area */
    @Override
    public void Log (String s) {
        synchronized (lock) {
            jTextArea1.append (s);
            System.out.print (s);
        }
    }
    
    /** Returns the port number */
    public int getPorto () {
        int porto;
        try {
            return Integer.parseInt (jTextPorto.getText ());
        } catch (NumberFormatException e) {
            return 0;
        }
    }
    
    /** Returns the keep alive interval value */
    public int getKeepAlive () {
        String txt= jTextKeepAlive.getText ();
        if (txt == null)
            return 0;
        try {
            return 1000*Integer.parseInt (txt);
        } catch (NumberFormatException e) {
            Log ("Invalid KeepAlive value: '"+txt+"'\n");
            return 0;
        }
    }
    
    /** Local function - use 'max_threads' variable */
    private int getMaxThreads () {
        String txt= jTextMaxThreads.getText ();
        if (txt == null)
            return 0;
        try {
            return 1000*Integer.parseInt (txt);
        } catch (NumberFormatException e) {
            Log ("Invalid MaxThreads value: '"+txt+"' - using "+
                    DefaultMaxThreads+"\n");
            return DefaultMaxThreads;
        }
    }
    
    /** Returns the root html directory */
    public String getRaizHtml () {
        return jTextRaizHtml.getText ();
    }
    
    /** Callback called when a new HTTP connection thread starts */
    public void thread_started () {
        if (main_thread != null) {
            n_threads++;
            jTextThreads.setText (Integer.toString (n_threads));
        }
    }
    
    /** Callback called when a HTTP connection thread ends */
    public void thread_ended () {
        if (main_thread != null) {
            n_threads--;
            jTextThreads.setText (Integer.toString (n_threads));

            // ???
        }
    }
    
    /** Returns the number of active connections */
    public int active_connects () {
        if (main_thread == null)
            return 0;
        return n_threads;
    }

    /** Returns true if main_thread is active */
    public boolean active () {
        return (main_thread != null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        new guiHttpd ().setVisible(true);
    }
    
  
    
    /** Handles client connections */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextIP;
    private javax.swing.JTextField jTextKeepAlive;
    private javax.swing.JTextField jTextMaxThreads;
    private javax.swing.JTextField jTextPorto;
    private javax.swing.JTextField jTextRaizHtml;
    private javax.swing.JTextField jTextThreads;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}


